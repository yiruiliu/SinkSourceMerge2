int2set:=function(int)
local k,q,r, A,Binary;
	k:=int;
	Binary:=[];
	while k>0 do
		r:=k mod 2;
		k:=QuoInt(k,2);
		Append(Binary,[r]);
	od;
	A:=Positions(Binary,1);
	return A;
end;

####subfunction for DD method
returnfullrank:=function(M)
	local vecsize,matsize,i,l,j,indicate;
	vecsize:=Size(M[1]);
	matsize:=Size(M);
	i:=1;
	l:=[M[1]];
	j:=1;
	indicate:=[];
	while i<vecsize+1 do
		if RankMat(l)=Size(l) then
			Append(indicate,[j]);
			i:=i+1;
			j:=j+1;
		else
			Remove(l,Size(l));
			j:=j+1;
		fi;
		if j<matsize and RankMat(l)<vecsize then
			Append(l,[M[j]]);
		fi;
	od;
	return [l,indicate];
end;

######ax>0 DDmethod transform H-representation to V-representation
DDmethod:=function(H)
	local d,l,A,i,R,RR,j1,h,product,J0,Jn,Jp,j2,j3,j31,ZJn,zjn,ZJp,zjp,j4,j41,j,Jprime,rjj;
	A:=returnfullrank(H);
	R:=Inverse(A[1]);
	RR:=TransposedMat(R);
	d:=Size(H[1]);
	l:=[1..Size(H)];
	for j1 in Difference(l,A[2]) do
		h:=H[j1];
		J0:=[];
		Jn:=[];
		Jp:=[];
		for j2 in [1..Size(RR)] do
			product:=h*RR[j2];
			if product=0 then
				Append(J0,[RR[j2]]);
			elif product>0 then
				Append(Jp,[RR[j2]]);
			elif product<0 then
				Append(Jn,[RR[j2]]);
			fi;
		od;
		ZJn:=[];
		for j3 in [1..Size(Jn)] do
			zjn:=[];
			for j31 in [1..Size(H)] do
				if Jn[j3]*H[j31]=0 then
					Append(zjn,[j31]);
				fi;
			od;
			Append(ZJn,[zjn]);
		od;
		ZJp:=[];
		for j4 in [1..Size(Jp)] do
			zjp:=[];
			for j41 in [1..Size(H)] do
				if Jp[j4]*H[j41]=0 then
					Append(zjp,[j41]);
				fi;
			od;
			Append(ZJp,[zjp]);
		od;
		Jprime:=Union(Jp,J0);
		for i in [1..Size(ZJn)] do
			for j in [1..Size(ZJp)] do
				if not Intersection(ZJn[i],ZJp[j])=[] then
					if RankMat(H{Intersection(ZJn[i],ZJp[j])})=d-2 then
						rjj:=H[j1]*Jp[j]*Jn[i]-H[j1]*Jn[i]*Jp[j];
						Jprime:=Union(Jprime,[rjj]);
					fi;
				fi;
			od;
		od;
		RR:=Jprime;
	od;
	if d=Size(H) then
		return RR;
	else 
		return Jprime;
	fi;
end;

##subfunction
Permute_marginalAndJoin:=function(ncinstance)
	local A,numofVar,i;
	numofVar:=ncinstance[3];
	A:=[set2int([numofVar])+2^numofVar..set2int([numofVar])+2^(numofVar+1)-2];
	for i in [1..numofVar] do
		A[set2int([i])]:=set2int([i]);
	od;
	for i in [1..Size(ncinstance[1])] do
		A[set2int(ncinstance[1][i])]:=set2int([numofVar])+set2int(ncinstance[1][i]);
	od;
	return A;
end;


##subfunction
Permute_matrix_parallel:=function(B,A)
	local Bt,Bf,A1;
	Bt:=TransposedMat(B);
	Bt:=ShallowCopy(Bt);
	A1:=ShallowCopy(A);
	SortParallel(A1,Bt);
	Bf:=TransposedMat(Bt);
	return [Bf,A1];
end;

##subfunction
Add_constraints_firsthalf:=function(proj_SH,proj_Sb,A1,ncinstance1)
	local conlin,i,numofMarginal,numofSour,linrows,con,j;
	i:=Size(proj_Sb)+1;
	linrows:=[];
	numofMarginal:=ncinstance1[3];
	numofSour:=ncinstance1[2]; 
	for con in ncinstance1[1] do  #### H(Out(t),In(t))=H(In(t))
		conlin:=ZeroMutable([1..Size(proj_SH[1])]);
		if Size(con[1])>1 then
			conlin[Position(A1,set2int(con[1])+set2int([numofMarginal]))]:=1; 
	    else
			conlin[Position(A1,set2int(con[1]))]:=1;
		fi;
		if Size(con[2])>1 then
			conlin[Position(A1,set2int(con[2])+set2int([numofMarginal]))]:=-1; 
	    else
			conlin[Position(A1,set2int(con[2]))]:=-1;
		fi;
		Append(proj_SH,[conlin]);
		Append(proj_Sb,[0]);
		Append(linrows,[i]);
		i:=i+1;
	od;
	conlin:=ZeroMutable([1..Size(proj_SH[1])]);
	if numofSour>1 then      #### H(s1,s2,..,sj)=H(s1)+H(s2)+,...,+H(sj)
		for j in [1..numofSour] do
			conlin[j]:=1;
		od;
	fi;
	conlin[Position(A1,set2int([1..numofSour])+set2int([numofMarginal]))]:=-1;
	Append(proj_SH,[conlin]);
	Append(proj_Sb,[0]);
	Append(linrows,[i]);
	i:=i+1;
	return [proj_SH,proj_Sb,linrows];
end;

##subfunction
CaptureJointEntropy:=function(Jncinstance)
	local i,JEntropy,Jsource,Ssource;
	JEntropy:=[];
	for i in [1..Size(Jncinstance[1])] do
		Append(JEntropy,[Jncinstance[1][i][1]]);
		Append(JEntropy,[Jncinstance[1][i][2]]);
	od;
	Jsource:=[];
	Jsource:=[1..Jncinstance[2]];
	JEntropy:=Union(JEntropy,[Jsource]);
	Ssource:=TransposedMat([[1..Jncinstance[3]]]);
	JEntropy:=Difference(JEntropy,Ssource);
	JEntropy:=[JEntropy,Jncinstance[2],Jncinstance[3]];
	return JEntropy;
end;

##subfunction
CutRREFpivotColumn:=function(Amatrix)
	local i,RemoveRow,RemoveColumn,posi,ARow,AColumnT,ARowT,AColumn;
	RemoveRow:=[];
	RemoveColumn:=[];
	for i in [1..Size(Amatrix)] do
		posi:=Position(Amatrix[i],1); #find position of pivots
		if posi=fail then
			Append(RemoveRow,[i]);
			else
			Append(RemoveColumn,[posi]);
		fi;
	od;
	if Size(RemoveRow)>0 then
		ARow:=Amatrix{Difference([1..Size(Amatrix)],RemoveRow)};
		else
		ARow:=ShallowCopy(Amatrix);
	fi;
	ARowT:=TransposedMat(ARow);
	AColumnT:=ARowT{Difference([1..Size(ARowT)],RemoveColumn)};
	AColumn:=TransposedMat(AColumnT);
	return AColumn;
end;
######################
function ( ncinstance )
    local  ShOB, i, linrows, con, conlin, j, conineq;
    ShOB := GenShannonUnBounded( ncinstance[3] );
    i := Size( ShOB[1] ) + 1;
    linrows := [  ];
    for con  in ncinstance[1]  do
        conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
        conlin[set2int( con[1] )] := 1;
        conlin[set2int( con[2] )] := -1;
        Append( ShOB[1], [ conlin ] );
        Append( ShOB[2], [ 0 ] );
        Append( linrows, [ i ] );
        i := i + 1;
    od;
    conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
    for j  in [ 1 .. ncinstance[2] ]  do
        conlin[set2int( [ j ] )] := 1;
    od;
    conlin[set2int( [ 1 .. ncinstance[2] ] )] := -1;
    Append( ShOB[1], [ conlin ] );
    Append( ShOB[2], [ 0 ] );
    Append( linrows, [ i ] );
    i := i + 1;
    ###add more source constraint
    conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
    for j  in [ 1 ,2 ]  do
        conlin[set2int( [ j ] )] := 1;
    od;
    conlin[set2int( [ 1 .. ncinstance[2] ] )] := -1;
    Append( ShOB[1], [ conlin ] );
    Append( ShOB[2], [ 0 ] );
    Append( linrows, [ i ] );
    i := i + 1;
    
    conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
    for j  in [ 1 ,3 ]  do
        conlin[set2int( [ j ] )] := 1;
    od;
    conlin[set2int( [ 1 .. ncinstance[2] ] )] := -1;
    Append( ShOB[1], [ conlin ] );
    Append( ShOB[2], [ 0 ] );
    Append( linrows, [ i ] );
    i := i + 1;
    
    conlin := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 ] );
    for j  in [ 2 ,3 ]  do
        conlin[set2int( [ j ] )] := 1;
    od;
    conlin[set2int( [ 1 .. ncinstance[2] ] )] := -1;
    Append( ShOB[1], [ conlin ] );
    Append( ShOB[2], [ 0 ] );
    Append( linrows, [ i ] );
    i := i + 1;
    #############
    
    ####adding H(s)>w, H(r)<R
    for j  in [ 1 .. Size( ShOB[1] ) ]  do
        ShOB[1][j] := Concatenation( ZeroMutable( [ 1 .. ncinstance[3] ] ), ShOB[1][j] );
    od;
    for j  in [ 1 .. ncinstance[2] ]  do
        conineq := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
        conineq[j] := 1;
        conineq[ncinstance[3] + set2int( [ j ] )] := -1;
        Append( ShOB[1], [ conineq ] );
        Append( ShOB[2], [ 0 ] );
        conineq := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
        conineq[j] := -1;
        Append( ShOB[1], [ conineq ] );
        Append( ShOB[2], [ 0 ] );
    od;
    for j  in [ ncinstance[2] + 1 .. ncinstance[3] ]  do
        conineq := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
        conineq[j] := -1;
        conineq[ncinstance[3] + set2int( [ j ] )] := 1;
        Append( ShOB[1], [ conineq ] );
        Append( ShOB[2], [ 0 ] );
        conineq := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
        conineq[j] := -1;
        Append( ShOB[1], [ conineq ] );
        Append( ShOB[2], [ 0 ] );
    od;
   ##### end of adding H(s)>w, H(r)<R
   
    conineq := ZeroMutable( [ 1 .. 2 ^ ncinstance[3] - 1 + ncinstance[3] ] );
    for j  in [ 1 .. ncinstance[3] ]  do
        conineq[j] := 1;
    od;
    Append( ShOB[1], [ conineq ] );
    Append( ShOB[2], [ 1 ] );
    return [ ShOB[1], ShOB[2], linrows ];
end

######################
##from Jnet to Bu>=0 (get B matrix from Jnet) #sub_main function
# input a Jnet to get B matrix along with the permutation indi_P
JnettoB:=function(Jnet) 
	local JEntropy,indi,ShOB,Permuteindi,SH,Sb,SH_PP,SH_P,i,conlin,Amatrix,k,AT,ATR,ACut,Atop_cut,Abuttom_cut,indi_P;
	JEntropy:=CaptureJointEntropy(Jnet);
	indi:=Permute_marginalAndJoin(JEntropy);
	ShOB:=GenShannonUnBounded(Jnet[3]); ## Shannon outer bound is Ax<=0
	SH:=-ShallowCopy(ShOB[1]);   ###transform into A'x>=0
	Sb:=-ShallowCopy(ShOB[2]);
	SH_PP:=Permute_matrix_parallel(SH,indi);
	SH_P:=SH_PP[1];
	indi_P:=SH_PP[2];
	Amatrix:=[];
	k:=Size(JEntropy[1])+Jnet[3];  ## number of joint and marginal entropies need to be kept
	for i in [1..k] do   ## number of joint and marginal entropies need to be kept
		conlin:=ZeroMutable([1..Size(SH_P[1])]);
		conlin[i]:=-1;
		Append(Amatrix,[conlin]);
	od;
	Append(Amatrix,SH_P);
	AT:=TransposedMat(Amatrix);
	ATR:=RREF(AT);
	ACut:=CutRREFpivotColumn(ATR);  ##cut off pivot columns in rref
	Atop_cut:=ACut{[1..k]};
	Abuttom_cut:=ACut{[k+1..Size(ACut)]};
	return [Atop_cut,Abuttom_cut,indi_P];
end;

#From Atop_cut Abottom_cut indi_P to marginal entropy region
BtoMarginal:=function(Atop_cut,Abottom_cut,indi_P,Jnet)
	local NAtop_cut,NAbottom_cut,I,Vbottom,C,NC,conlin,j,b,SBL,G,rlist1,rrA,rrb,row,trans_ineq,Oi,O;
	NAtop_cut:=-Atop_cut;
	NAbottom_cut:=-Abottom_cut;
	I:=IdentityMat(Size(NAbottom_cut[1]));
	Append(I,NAbottom_cut);
	Vbottom:=DDmethod(I);
	C:=Vbottom*TransposedMat(NAtop_cut);   #Cx>=0   shannon outer bound projected onto useful variables
	NC:=-C;   # NCx<=0
	b:=ZeroMutable([1..Size(NC)]);
	conlin:=ZeroMutable([1..Size(NC[1])]);  ## sum<=1
	for j in [1..Jnet[2]] do
		conlin[j]:=1;
	od;
	Append(NC,[conlin]);
	Append(b,[1]);
	SBL:=Add_constraints_firsthalf(NC,b,indi_P,Jnet);
	G := Group( [ () ] );
	rlist1:=symCHM( SBL[1], SBL[2], SBL[3], Jnet[3], G, OnProjPts, OnProjIneq, false );
	rrA := [  ];
	rrb := [  ];
	for row  in rlist1[2]  do
	if row[Size(row)]=0  then
		Append( rrA, [ row{[ 1 .. Size( row ) - 1 ]} ] );
		Append( rrb, [ row[Size( row )] ] );
	fi;
	od;
	trans_ineq := [  ];
	Oi := OrbitsDomain( G, rrA, OnProjIneq );
	for O  in Oi  do
		Append( trans_ineq, [ O[1] ] );
	od;
	return [ trans_ineq, RRparse( Jnet, trans_ineq ) ];
end;
